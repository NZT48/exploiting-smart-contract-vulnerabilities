// SPDX-License-Identifier: MIT
pragma solidity ^0.7.6;

// EtherChest
contract EtherChest {

	// Balances of all accounts that stored ether in contract
    mapping(address => uint) public balances;

	// End of lock time
    mapping(address => uint) public lockTime;

    function deposit() public payable {
		balances[msg.sender] += msg.value;
        lockTime[msg.sender] += block.timestamp + 1 weeks;
	}

    function increaseLockTime(uint _secondsToIncrease) public {
        lockTime[msg.sender] += _secondsToIncrease;
    }

	function getLockTime() public view returns(uint) {
		return lockTime[msg.sender];
	}

	function withdraw(uint _amount) public {
		require(balances[msg.sender] >= _amount);
        require(block.timestamp > lockTime[msg.sender], "Lock time not expired");

        (bool sent, ) = msg.sender.call{value:_amount}("");
		require(sent, "Failed to send Ether");
		balances[msg.sender] -= _amount;
	}

	function getBalance() public view returns (uint) {
		return address(this).balance;
	}

	function safeWithdraw(uint _amount) public {
		require(balances[msg.sender] >= _amount);
        require(block.timestamp > lockTime[msg.sender], "Lock time not expired");
		
		balances[msg.sender] -= _amount;
			(bool sent, ) = msg.sender.call{value:_amount}("");
			require(sent, "Failed to send Ether");
	}

}
