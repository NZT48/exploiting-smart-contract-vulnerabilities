// SPDX-License-Identifier: MIT
pragma solidity ^0.8.10;

import './lib.sol';

contract Giveaway {
    address public lib;
    address public winner;
    address payable public owner;
    uint targetAmount = 20 ether;
    uint balance;

    constructor(address _lib) payable {
        require(msg.value == 10 ether, "To initialize contract you need to send 10 Ethers");
        lib = _lib;
        owner = payable(msg.sender);
    }

    function enterGiveaway() public payable {
        require(msg.value == 1 ether, "You can only send 1 Ether");

        uint currentBalance = address(this).balance;
        require(currentBalance <= targetAmount, "Game is over");

        if (currentBalance == targetAmount) {
            winner = msg.sender;
        }
    }

    function safeEnterGiveaway() public payable {
        require(msg.value == 1 ether, "You can only send 1 Ether");

        balance += msg.value;
        require(balance <= targetAmount, "Game is over");

        if (balance == targetAmount) {
            winner = msg.sender;
        }
    }

    function prepareNewPuzzle(uint _num) public {
        (bool sent, ) = lib.delegatecall(abi.encodeWithSignature("preparePuzzle(uint256)", _num));
        require(sent, "Failed to prepare new puzzle");
    }

    function claimReward() public {
        require(msg.sender == winner, "Not a winner");

        (bool sent, ) = msg.sender.call{value: address(this).balance}("");
        require(sent, "Failed to send Ether");
    }

    function getBalance() public view returns(uint) {
        return address(this).balance;
    }

}